=head1 NAME

DBIx::Class::Schema::Versioned::Inline - schema versioning for DBIx::Class with version information embedded inline in the schema definition

=head1 VERSION

Version 0.001


=cut

=head1 SYNOPSIS

 package MyApp::Schema;

 use base 'DBIx::Class::Schema::Versioned::Inline';

 our $VERSION = '0.002';

 __PACKAGE__->load_namespaces;

 ...

 package MyApp::Schema::Result::Bar;

 use base 'DBIx::Class::Core';

 __PACKAGE__->table('bars');

 __PACKAGE__->add_columns(
    "bars_id",
    { data_type => 'integer', is_auto_increment => 1, },
    "age",
    { data_type => "integer", is_nullable => 1 },
    "height",
    {
      data_type   => "integer", is_nullable => 1,
      versioned   => { since => '0.003' }
    },
    "weight",
    {
      data_type   => "integer", is_nullable => 1,
      versioned   => { until => '0.3' }
    },
 );

 __PACKAGE__->set_primary_key('bars_id');

 __PACKAGE__->has_many(
    'foos', 'TestVersion::Schema::Result::Foo',
    'foos_id', { versioned => { until => '0.002' } },
 );

 __PACKAGE__->resultset_attributes( { versioned => { since => '0.002' } } );

 ...

 package MyApp::Schema::Result::Foo;

 use base 'DBIx::Class::Core';

 __PACKAGE__->table('foos');

 __PACKAGE__->add_columns(
    "foos_id",
    { data_type => 'integer', is_auto_increment => 1 },
    "age",
    {
      data_type => "integer", is_nullable => 1,
      versioned   => { since => '0.002' }
    },
    "height",
    {
     data_type => "integer", is_nullable => 1,
     versioned => { until => '0.001' }
    },
    "width",
    {
      data_type => "integer", is_nullable => 1,
      versioned => { since => '0.002', renamed_from => 'height' }
    },
    "bars_id",
    {
      data_type => 'integer', is_foreign_key => 1, is_nullable => 0,
      versioned => { since => '0.002' }
    },
 );

 __PACKAGE__->set_primary_key('foos_id');

 __PACKAGE__->belongs_to(
    'bar', 'TestVersion::Schema::Result::Bar',
    'bars_id', { versioned => { since => '0.002' } },
 );

 __PACKAGE__->resultset_attributes( { versioned => { until => '0.002' } } );

 ...

 package MyApp::Schema::Upgrade;

 use base 'DBIx::Class::Schema::Versioned::Inline::Upgrade';
 use DBIx::Class::Schema::Versioned::Inline::Upgrade qw/before after/;

 before '0.3.3' => sub {
     my $schema = shift;
     $schema->resultset('Foo')->update({ bar => '' });
 };

 after '0.3.3' => sub {
     my $schema = shift;
     # do something else
 };


=head1 DESCRIPTION

This module extends L<DBIx::Class::Schema::Versioned> using simple 'since' and 'until' markers within result classes to specify the schema version at which classes and columns were introduced or removed. Column since/until definitions are included as part of 'versioned' info in add_column(s).

=head2 since

When a class is added to a schema at a specific schema version version then a 'since' attribute must be added to the class which returns the version at which the class was added. For example:

 __PACKAGE__->resultset_attributes({ versioned => { since => '0.002' }});

It is not necessary to add this to the initial version of a class since any class without this atribute is assumed to have existed for ever.

Using 'since' in a column or relationship definition denotes the version at which the column/relation was added. For example:

 __PACKAGE__->add_column(
   "age",
   { data_type   => "integer", is_nullable => 1,
     versioned   => { since => '0.002' }
   }
 );

=head2 until

When used as a class attribute this should be the final schema version at which the class is to be used. The underlying database table will be removed when the schema is upgraded to a higher version. Example definition:

 __PACKAGE__->resultset_attributes({ versioned => { since => '0.3' }});

Using 'until' in a column or relationship definition will cause removal of the column/relation from the table when the schema is upgraded past this version.

=head2 renamed_from

For renaming a class:

 package MyApp::Schema::Result::Foo;

 __PACKAGE__->table('foos');
 __PACKAGE__->resultset_attributes({ versioned => { until => '0.4 }});

 package MyApp::Schema::Result::Fooey;

 __PACKAGE__->table('fooeys');
 __PACKAGE__->resultset_attributes({
     versioned => { since => '0.5, renamed_from => 'Foo' }
 });

Or for renaming a column:

 __PACKAGE__->add_columns(
     "height",
     { data_type => "integer", versioned => { until => '0.001' } },
     "width",
     {
       data_type => "integer",
       versioned => { since => '0.002', renamed_from => 'height' }
     },
 )


=cut

=head1 METHODS

Many methods are inherited or overloaded from L<DBIx::Class::Schema::Versioned>.

=head2 connection

Overloaded method. This checks the DBIC schema version against the DB version and ???? TODO ???? (undecided so far) if they are not the same or if the DB is unversioned.


=cut

=head2 deploy

Inherited method. Same as L<DBIx::Class::Schema/deploy> but also calls C<install>.

=head2 install

Inherited method. Call this to initialise a previously unversioned database.

=head2 ordered_schema_versions

Overloaded method. Returns an ordered list of schema versions. This is then used to produce a set of steps to upgrade through to achieve the required schema version.


=cut

=head2 upgrade

Inherited method. Call this to attempt to upgrade your database from the version it is at to the version this DBIC schema is at. If they are the same it does nothing.

=head2 upgrade_single_step

=over 4
 
=item Arguments: db_version - the version currently within the db
 
=item Arguments: target_version - the version to upgrade to

=back

Overloaded method. Call this to attempt to upgrade your database from the I<db_version> to the I<target_version>. If they are the same it does nothing.

All upgrade operations within this step are performed inside a single transaction so either all succeed or all fail. If successful the dbix_class_schema_versions table is updated with the I<target_version>.

This method may be called repeatedly by the L</upgrade> method to upgrade through a series of updates.


=cut

=head2 versioned_schema

=over 4

=item Arguments: version - the schema version we want to deploy

=back

Parse schema and remove classes, columns and relationships that are not valid for the requested version.


=cut

=head1 CAVEATS

Please anticipate API changes in this early state of development.

=head1 AUTHOR

Peter Mottram (SysPete), "peter@sysnix.com"

=head1 BUGS

LOTS of bugs and missing features right now.

NOTE: upgrades are NOT yet implemented.

Please report any bugs or feature requests via the project's GitHub issue tracker:

L<https://github.com/Sysnix/dbix-class-schema-versioned-jiftyesque/issues>

I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc DBIx::Class::Schema::Versioned::Inline

You can also look for information at:

=over 4

=item * GitHub repository

L<https://github.com/Sysnix/dbix-class-schema-versioned-inline>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/DBIx-Class-Schema-Versioned-Inline>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/DBIx-Class-Schema-Versioned-Inline>

=item * Search CPAN

L<http://search.cpan.org/dist/DBIx-Class-Schema-Versioned-Inline/>

=back

=head1 ACKNOWLEDGEMENTS

Thanks to Best Practical Solutions for the L<Jifty> framework and L<Jifty::DBI> which inspired this distribution. Thanks also to Matt S. Trout and all of the L<DBIx::Class> developers for an excellent distribution.

=head1 LICENSE AND COPYRIGHT

Copyright 2014 Peter Mottram (SysPete).

This program is free software; you can redistribute it and/or modify it under the terms of either: the GNU General Public License as published by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.


=cut

